npm i express cors body-parser mysql2 redis dotenv

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const mysql = require('mysql2/promise');
const redis = require('redis');
require('dotenv').config();

const app = express();
const PORT = 8000;

// -------------------------------------------
// Connecting to Redis
const redisClient = redis.createClient({
    password: "oIuDBAzN636Mpx54Dxz2svQtc5gSYhwb",
    socket: {
        host: "redis-14362.c305.ap-south-1-1.ec2.redns.redis-cloud.com",
        port: 14362
    }
});

redisClient.connect()
    .then(() => console.log('Connected to Redis'))
    .catch(err => console.error("Error connecting to Redis:", err));

// -------------------------------------------
// Establish MySQL connection
const db = mysql.createPool({
    host: 'localhost',
    user: 'root',
    password: '123456',
    database: 'movie_db'
});

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Routes
app.get("/", (req, res) => {
    res.send("Hello World!");
});

app.post('/movies', async (req, res) => {
    const { title, description, year } = req.body;

    if (!title || !description || !year) {
        return res.status(400).json({ error: 'Title, description, and year are required' });
    }

    try {
        const [result] = await db.query(
            'INSERT INTO movies (title, description, year) VALUES (?, ?, ?)',
            [title, description, year]
        );

        const newMovie = { id: result.insertId, title, description, year };

        // Optionally cache the newly added movie
        const cacheKey = `movie:${result.insertId}`;
        await redisClient.setEx(cacheKey, 3600, JSON.stringify(newMovie)); // Cache for 1 hour

        res.status(201).json({ message: 'Movie added successfully', movie: newMovie });
    } catch (error) {
        console.error("Error adding movie:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

app.get('/movies', async (req, res) => {
    try {
        const [movies] = await db.query('SELECT * FROM movies LIMIT 20');
        res.json(movies);
    } catch (error) {
        console.error("Error fetching movies:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

app.get('/movies/:id', async (req, res) => {
    const { id } = req.params;
    const cacheKey = `movie:${id}`;

    try {
        const cachedMovie = await redisClient.get(cacheKey);
        if (cachedMovie) {
            console.log("Cache hit");
            return res.json(JSON.parse(cachedMovie));
        }

        console.log("Cache miss");
        const [movies] = await db.query('SELECT * FROM movies WHERE id = ?', [id]);
        if (!movies.length) {
            return res.status(404).send('Movie not found');
        }

        const movie = movies[0];
        await redisClient.setEx(cacheKey, 3600, JSON.stringify(movie)); // Cache for 1 hour
        res.json(movie);
    } catch (error) {
        console.error("Error fetching movie details:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

app.post('/reviews', async (req, res) => {
    const { movie_id, user_name, review, rating } = req.body;
    try {
        const [result] = await db.query(
            'INSERT INTO reviews (movie_id, user_name, review, rating) VALUES (?, ?, ?, ?)',
            [movie_id, user_name, review, rating]
        );
        res.status(201).json({ message: 'Review added successfully', reviewId: result.insertId });
    } catch (error) {
        console.error("Error creating review:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

app.get("/searchMovies", async (req, res) => {
    const { query } = req.query;
    const cacheKey = `search:${query}`;

    try {
        const cachedMovies = await redisClient.get(cacheKey);
        if (cachedMovies) {
            console.log("Cache hit");
            return res.json(JSON.parse(cachedMovies));
        }

        console.log("Cache miss");
        const [movies] = await db.query('SELECT * FROM movies WHERE title LIKE ?', [`%${query}%`]);
        await redisClient.setEx(cacheKey, 3600, JSON.stringify(movies)); // Cache for 1 hour
        res.json(movies);
    } catch (error) {
        console.error("Error searching movies:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
